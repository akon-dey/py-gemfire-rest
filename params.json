{"name":"Py-gemfire-rest","tagline":"Python client for Gemfire's REST service.","body":"# py-gemfire-rest\r\n=================\r\n\r\nThis library enables your python applications to use GemFire as a datastore. (GemFire is a distributed key-value store. A short tutorial can be found at http://goo.gl/rF93fn). This library exposes Spring's CrudRepository like methods in an effort to simplify GemFire's APIs while still giving access to advanced GemFire features (details below). \r\n\r\n## Installation\r\n---------------\r\n\r\nUsing pip installation is simple\r\n\r\n    $ sudo pip install gemfire-rest\r\n\r\nor from source:\r\n\r\n    $ sudo python setup.py install\r\n\r\n## Quick Start\r\n--------------\r\n\r\n1. Start the GemFire REST service by [following the instructions](http://gemfire.docs.pivotal.io/latest/userguide/index.html#gemfire_rest/setup_config.html)\r\n2. Create a Region on the server (Region is a distributed ConcurrentMap in which GemFire stores the data). \r\n```\r\n    gfsh>create region --name=orders --type=PARTITION\r\n```\r\n3. \r\n```python\r\n    >>> from gemfire.GemfireClient import *\r\n    >>> client = GemfireClient(hostname=\"localhost\", port=8080)\r\n    >>> myRepo = client.create_repository(\"orders\")\r\n    >>> myRepo.save(order)\r\n```\r\n\r\nwhere the order object has an \"id\" instance variable. The library handles converting the object to/from json. \r\n\r\n## API Reference\r\n----------------\r\n\r\nThis library exercises [GemFire's REST APIs](http://gemfire.docs.pivotal.io/latest/userguide/index.html#gemfire_rest/book_intro.html) for enabling your python application to use GemFire as its datastore. To get started, we create a client by providing a hostname and port for an already running endpoint. \r\n```python\r\n    client = GemfireClient(hostname=\"localhost\", port=8080)\r\n```\r\n\r\nFor each type of Object that we want to store in GemFire, we create a repository (Please not that you will have to create a Region on the server with the same name as the repository).\r\n```python\r\n    orders = client.create_repository(\"orders\")\r\n```\r\nThe client provides a method to look up all the Regions that have been created on the server already:\r\n```python\r\n    client.list_all_regions()\r\n```\r\n\r\nGemfireClient also has methods for querying and function execution which we will see later.\r\n\r\n### Repository\r\n--------------\r\n\r\nJust like Spring's CrudRepository interface, the following methods are available on the Repository\r\n```python\r\n    save(entities)   #saves one or more entities in GemFire\r\n    find(ids)        #finds entities with the given ids\r\n    find_all()       #returns all data in region\r\n    exists(id)       #checks to see if an entity with the given id exists\r\n    delete(entities) #deletes the given entities from GemFire\r\n    delete_all()     #deletes all data in the GemFire region\r\n```\r\n\r\nAs the naming suggests, intention of these methods is pretty clear. One thing that needs to be highlighted here is that all entities need an identity; this library uses \"id\" instance variable as identity. So all entities that are stored in GemFire need to have an instance variable named \"id\".\r\n\r\n### Region\r\n----------\r\n\r\nFor advanced operations, we also provide access to Region, which defines the following methods:\r\n```python\r\n    create(key, value)  #will insert only if key does not exists\r\n    update(key, value)  #will update only if the key exists\r\n    keys()              # returns all keys in the region\r\n    compare_and_set(key, oldvalue, newvalue) #sets the key to \r\n            #newvalue only if current value is equal ot oldvalue\r\n```\r\n\r\n### Querying\r\n------------\r\nGemfireClient provides API for running ad-hoc [OQL queries](http://gemfire.docs.pivotal.io/latest/userguide/index.html#developing/querying_basics/chapter_overview.html) on the server.\r\n```python\r\n    adhoc_query(query_string)  #OQL query string\r\n```\r\n\r\nFor faster performance, you will want to run prepared OQL queries. GemfireClient provides the following APIs for this:\r\n```python\r\n    #registers and prepares the OQL query on the server\r\n    new_query(query_id, query_string) \r\n    #runs the query with specified parameters \r\n    run_query(query_id, query_args)   \r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}